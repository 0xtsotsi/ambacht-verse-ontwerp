{
  "info": {
    "name": "Wesley's Ambacht Catering API",
    "description": "Complete API testing collection for Wesley's Ambacht premium catering services.\n\n## Setup Instructions\n\n1. Import this collection into Postman/Insomnia\n2. Set up environment variables:\n   - `base_url`: https://api.wesleysambacht.nl/v1\n   - `jwt_token`: Your authentication JWT token\n3. Run the \"Auth Test\" request first to verify your setup\n4. Use the example requests as templates for your integration\n\n## Collection Structure\n\n- **Authentication**: Test and validate JWT tokens\n- **Availability**: Check slots and manage bookings\n- **Bookings**: Full booking lifecycle management  \n- **Quotes**: Dynamic pricing and quote generation\n- **Add-on Services**: Extra services management\n- **Error Scenarios**: Common error handling patterns\n\n## Variables Used\n\n- `{{base_url}}` - API base URL\n- `{{jwt_token}}` - Your authentication token\n- `{{booking_id}}` - Created booking ID (auto-set)\n- `{{quote_id}}` - Created quote ID (auto-set)\n- `{{event_date}}` - Future event date (auto-generated)\n",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{jwt_token}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "https://api.wesleysambacht.nl/v1",
      "type": "string"
    },
    {
      "key": "jwt_token",
      "value": "your-jwt-token-here",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "🔐 Authentication",
      "description": "Authentication and token validation endpoints",
      "item": [
        {
          "name": "Auth Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Authentication successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/availability?limit=1",
              "host": ["{{base_url}}"],
              "path": ["availability"],
              "query": [
                {
                  "key": "limit",
                  "value": "1"
                }
              ]
            },
            "description": "Test authentication by making a simple API call"
          }
        }
      ]
    },
    {
      "name": "📅 Availability Management",
      "description": "Check availability and manage booking slots",
      "item": [
        {
          "name": "Get Availability Slots (Date Range)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has availability data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Each slot has required fields', function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.data.length > 0) {",
                  "        const slot = jsonData.data[0];",
                  "        pm.expect(slot).to.have.property('id');",
                  "        pm.expect(slot).to.have.property('date');",
                  "        pm.expect(slot).to.have.property('time_slot');",
                  "        pm.expect(slot).to.have.property('max_bookings');",
                  "        pm.expect(slot).to.have.property('current_bookings');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Set dynamic dates for testing",
                  "const today = new Date();",
                  "const tomorrow = new Date(today);",
                  "tomorrow.setDate(tomorrow.getDate() + 1);",
                  "const nextWeek = new Date(today);",
                  "nextWeek.setDate(nextWeek.getDate() + 7);",
                  "",
                  "pm.collectionVariables.set('start_date', tomorrow.toISOString().split('T')[0]);",
                  "pm.collectionVariables.set('end_date', nextWeek.toISOString().split('T')[0]);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/availability?start_date={{start_date}}&end_date={{end_date}}",
              "host": ["{{base_url}}"],
              "path": ["availability"],
              "query": [
                {
                  "key": "start_date",
                  "value": "{{start_date}}",
                  "description": "Start date (auto-generated)"
                },
                {
                  "key": "end_date",
                  "value": "{{end_date}}",
                  "description": "End date (auto-generated)"
                }
              ]
            },
            "description": "Get all availability slots within a date range. Dates are auto-generated for next week."
          }
        },
        {
          "name": "Check Specific Slot Availability",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has availability status', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('available');",
                  "    pm.expect(jsonData.available).to.be.a('boolean');",
                  "});",
                  "",
                  "pm.test('Response has time slot info', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('time_slot');",
                  "    pm.expect(jsonData.time_slot).to.match(/^\\d{2}:\\d{2}$/);",
                  "});",
                  "",
                  "// Store availability for next tests",
                  "const jsonData = pm.response.json();",
                  "pm.collectionVariables.set('slot_available', jsonData.available);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Set a future date and time for testing",
                  "const futureDate = new Date();",
                  "futureDate.setDate(futureDate.getDate() + 7);",
                  "pm.collectionVariables.set('event_date', futureDate.toISOString().split('T')[0]);",
                  "pm.collectionVariables.set('event_time', '18:00');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"date\": \"{{event_date}}\",\n  \"time\": \"{{event_time}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/availability/check",
              "host": ["{{base_url}}"],
              "path": ["availability", "check"]
            },
            "description": "Check if a specific date and time slot is available for booking"
          }
        },
        {
          "name": "Get Available Time Slots for Date",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has time slots', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Response has grouped slots', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('grouped_slots');",
                  "    pm.expect(jsonData.grouped_slots).to.have.property('morning');",
                  "    pm.expect(jsonData.grouped_slots).to.have.property('afternoon');",
                  "    pm.expect(jsonData.grouped_slots).to.have.property('evening');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/availability/slots/{{event_date}}",
              "host": ["{{base_url}}"],
              "path": ["availability", "slots", "{{event_date}}"]
            },
            "description": "Get all available time slots for a specific date, grouped by time periods"
          }
        }
      ]
    },
    {
      "name": "📋 Booking Management",
      "description": "Create and manage catering bookings",
      "item": [
        {
          "name": "Create New Booking",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Booking created successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has booking data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('id');",
                  "});",
                  "",
                  "pm.test('Booking has correct status', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.status).to.equal('pending');",
                  "});",
                  "",
                  "// Store booking ID for subsequent tests",
                  "const jsonData = pm.response.json();",
                  "pm.collectionVariables.set('booking_id', jsonData.data.id);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"customer_name\": \"Jan van der Berg\",\n  \"customer_email\": \"jan@example.com\",\n  \"customer_phone\": \"+31 6 12345678\",\n  \"company_name\": \"ABC Consulting B.V.\",\n  \"event_date\": \"{{event_date}}\",\n  \"event_time\": \"{{event_time}}\",\n  \"guest_count\": 30,\n  \"service_category\": \"corporate\",\n  \"service_tier\": \"premium\",\n  \"special_requests\": \"Vegetarian options preferred, outdoor seating if weather permits\",\n  \"dietary_restrictions\": \"2 guests with nut allergies, 1 vegan\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/bookings",
              "host": ["{{base_url}}"],
              "path": ["bookings"]
            },
            "description": "Create a new catering booking with customer details and preferences"
          }
        },
        {
          "name": "Get Booking Details",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has booking details', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('id');",
                  "    pm.expect(jsonData.data).to.have.property('customer_name');",
                  "    pm.expect(jsonData.data).to.have.property('event_date');",
                  "});",
                  "",
                  "pm.test('Booking ID matches', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const expectedId = pm.collectionVariables.get('booking_id');",
                  "    pm.expect(jsonData.data.id).to.equal(expectedId);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/bookings/{{booking_id}}",
              "host": ["{{base_url}}"],
              "path": ["bookings", "{{booking_id}}"]
            },
            "description": "Retrieve detailed information about a specific booking"
          }
        },
        {
          "name": "Update Booking Status to Confirmed",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status updated successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Booking status is confirmed', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.status).to.equal('confirmed');",
                  "});",
                  "",
                  "pm.test('Confirmed timestamp is set', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.confirmed_at).to.not.be.null;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"confirmed\",\n  \"notes\": \"Booking confirmed after customer phone call\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/bookings/{{booking_id}}",
              "host": ["{{base_url}}"],
              "path": ["bookings", "{{booking_id}}"]
            },
            "description": "Update booking status to confirmed with optional notes"
          }
        },
        {
          "name": "List All Bookings",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has bookings list', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Response has pagination meta', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('meta');",
                  "    pm.expect(jsonData.meta).to.have.property('total');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/bookings?status=confirmed&limit=10",
              "host": ["{{base_url}}"],
              "path": ["bookings"],
              "query": [
                {
                  "key": "status",
                  "value": "confirmed"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            },
            "description": "List bookings with filtering and pagination"
          }
        },
        {
          "name": "Add Services to Booking",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Add-ons added successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has add-on data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Each add-on has calculated price', function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.data.length > 0) {",
                  "        jsonData.data.forEach(addon => {",
                  "            pm.expect(addon).to.have.property('calculated_price');",
                  "            pm.expect(addon.calculated_price).to.be.above(0);",
                  "        });",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Note: In real usage, you'd get these service IDs from the add-on services endpoint",
                  "// For testing purposes, we'll use example UUIDs"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"services\": [\n    {\n      \"service_id\": \"550e8400-e29b-41d4-a716-446655440001\",\n      \"quantity\": 1\n    },\n    {\n      \"service_id\": \"550e8400-e29b-41d4-a716-446655440002\",\n      \"quantity\": 2\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{base_url}}/bookings/{{booking_id}}/add-ons",
              "host": ["{{base_url}}"],
              "path": ["bookings", "{{booking_id}}", "add-ons"]
            },
            "description": "Add additional services to an existing booking with automatic price calculation"
          }
        }
      ]
    },
    {
      "name": "💰 Quote Generation",
      "description": "Generate and manage pricing quotes",
      "item": [
        {
          "name": "Generate Quote",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Quote generated successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has quote data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('id');",
                  "    pm.expect(jsonData.data).to.have.property('total_amount');",
                  "});",
                  "",
                  "pm.test('Response has pricing breakdown', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('breakdown');",
                  "    pm.expect(jsonData.breakdown).to.have.property('base_price');",
                  "    pm.expect(jsonData.breakdown).to.have.property('final_total');",
                  "});",
                  "",
                  "pm.test('Quote total is positive', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.total_amount).to.be.above(0);",
                  "});",
                  "",
                  "// Store quote ID for subsequent tests",
                  "const jsonData = pm.response.json();",
                  "pm.collectionVariables.set('quote_id', jsonData.data.id);"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"service_category\": \"corporate\",\n  \"service_tier\": \"premium\",\n  \"guest_count\": 30,\n  \"event_date\": \"{{event_date}}\",\n  \"selected_add_ons\": [],\n  \"custom_notes\": \"Standard corporate lunch setup with dietary accommodations\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/quotes",
              "host": ["{{base_url}}"],
              "path": ["quotes"]
            },
            "description": "Generate a detailed pricing quote with breakdown calculations"
          }
        },
        {
          "name": "Get Quote Details",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has quote details', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('id');",
                  "    pm.expect(jsonData.data).to.have.property('status');",
                  "    pm.expect(jsonData.data).to.have.property('valid_until');",
                  "});",
                  "",
                  "pm.test('Quote ID matches', function () {",
                  "    const jsonData = pm.response.json();",
                  "    const expectedId = pm.collectionVariables.get('quote_id');",
                  "    pm.expect(jsonData.data.id).to.equal(expectedId);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/quotes/{{quote_id}}",
              "host": ["{{base_url}}"],
              "path": ["quotes", "{{quote_id}}"]
            },
            "description": "Retrieve detailed information about a specific quote"
          }
        },
        {
          "name": "Update Quote Status to Sent",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Quote status updated', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Quote status is sent', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.status).to.equal('sent');",
                  "});",
                  "",
                  "pm.test('Sent timestamp is set', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.data.sent_at).to.not.be.null;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"sent\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/quotes/{{quote_id}}",
              "host": ["{{base_url}}"],
              "path": ["quotes", "{{quote_id}}"]
            },
            "description": "Update quote status to sent (triggers email notification)"
          }
        },
        {
          "name": "Generate Quote with Volume Discount",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Large group quote generated', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Volume discount applied', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.breakdown).to.have.property('volume_discount');",
                  "    pm.expect(jsonData.breakdown.volume_discount).to.not.be.null;",
                  "});",
                  "",
                  "pm.test('Discount amount is positive', function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.breakdown.volume_discount) {",
                  "        pm.expect(jsonData.breakdown.volume_discount.discount_amount).to.be.above(0);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"service_category\": \"wedding\",\n  \"service_tier\": \"luxury\",\n  \"guest_count\": 75,\n  \"event_date\": \"{{event_date}}\",\n  \"selected_add_ons\": [],\n  \"custom_notes\": \"Large wedding reception with premium service\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/quotes",
              "host": ["{{base_url}}"],
              "path": ["quotes"]
            },
            "description": "Generate a quote for a large group to test volume discount application"
          }
        }
      ]
    },
    {
      "name": "🛠️ Add-on Services",
      "description": "Manage additional services and pricing",
      "item": [
        {
          "name": "Get All Add-on Services",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has services data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Services have required fields', function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.data.length > 0) {",
                  "        const service = jsonData.data[0];",
                  "        pm.expect(service).to.have.property('id');",
                  "        pm.expect(service).to.have.property('name');",
                  "        pm.expect(service).to.have.property('category');",
                  "        pm.expect(service).to.have.property('is_active');",
                  "    }",
                  "});",
                  "",
                  "pm.test('Response has grouped services', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('grouped_by_category');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/add-on-services",
              "host": ["{{base_url}}"],
              "path": ["add-on-services"]
            },
            "description": "Get all active add-on services with category grouping"
          }
        },
        {
          "name": "Get Services by Category (Beverages)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('All services are beverages', function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.data.length > 0) {",
                  "        jsonData.data.forEach(service => {",
                  "            pm.expect(service.category).to.equal('beverages');",
                  "        });",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/add-on-services?category=beverages",
              "host": ["{{base_url}}"],
              "path": ["add-on-services"],
              "query": [
                {
                  "key": "category",
                  "value": "beverages"
                }
              ]
            },
            "description": "Get add-on services filtered by category"
          }
        },
        {
          "name": "Get Services by Category (Staff)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('All services are staff-related', function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.data.length > 0) {",
                  "        jsonData.data.forEach(service => {",
                  "            pm.expect(service.category).to.equal('staff');",
                  "        });",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/add-on-services?category=staff",
              "host": ["{{base_url}}"],
              "path": ["add-on-services"],
              "query": [
                {
                  "key": "category",
                  "value": "staff"
                }
              ]
            },
            "description": "Get staff-related add-on services"
          }
        }
      ]
    },
    {
      "name": "❌ Error Scenarios",
      "description": "Test common error conditions and responses",
      "item": [
        {
          "name": "Invalid Date Format",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Returns validation error', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error response has correct structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "    pm.expect(jsonData.error).to.have.property('code');",
                  "    pm.expect(jsonData.error).to.have.property('message');",
                  "});",
                  "",
                  "pm.test('Error code is validation error', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error.code).to.equal('VALIDATION_ERROR');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"date\": \"invalid-date\",\n  \"time\": \"18:00\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/availability/check",
              "host": ["{{base_url}}"],
              "path": ["availability", "check"]
            },
            "description": "Test validation error for invalid date format"
          }
        },
        {
          "name": "Guest Count Too Low",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Returns validation error', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error mentions guest count', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error.message.toLowerCase()).to.include('guest');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"customer_name\": \"Test Customer\",\n  \"customer_email\": \"test@example.com\",\n  \"event_date\": \"{{event_date}}\",\n  \"event_time\": \"18:00\",\n  \"guest_count\": 5,\n  \"service_category\": \"corporate\",\n  \"service_tier\": \"premium\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/bookings",
              "host": ["{{base_url}}"],
              "path": ["bookings"]
            },
            "description": "Test validation error for guest count below minimum"
          }
        },
        {
          "name": "Unauthorized Request (No Token)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Returns unauthorized error', function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test('Error code is unauthorized', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error.code).to.equal('UNAUTHORIZED');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/bookings",
              "host": ["{{base_url}}"],
              "path": ["bookings"]
            },
            "description": "Test authentication error without bearer token"
          }
        },
        {
          "name": "Non-existent Resource (404)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Returns not found error', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error code is not found', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.error.code).to.equal('NOT_FOUND');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/bookings/00000000-0000-0000-0000-000000000000",
              "host": ["{{base_url}}"],
              "path": ["bookings", "00000000-0000-0000-0000-000000000000"]
            },
            "description": "Test not found error for non-existent booking"
          }
        },
        {
          "name": "Time Slot Already Taken (409 Conflict)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// This test may return either 409 (conflict) if slot is taken",
                  "// or 201 (success) if slot is available",
                  "pm.test('Response is either success or conflict', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([201, 409]);",
                  "});",
                  "",
                  "if (pm.response.code === 409) {",
                  "    pm.test('Conflict error has correct structure', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData.error.code).to.equal('SLOT_UNAVAILABLE');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"customer_name\": \"Second Customer\",\n  \"customer_email\": \"second@example.com\",\n  \"event_date\": \"{{event_date}}\",\n  \"event_time\": \"{{event_time}}\",\n  \"guest_count\": 25,\n  \"service_category\": \"corporate\",\n  \"service_tier\": \"premium\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/bookings",
              "host": ["{{base_url}}"],
              "path": ["bookings"]
            },
            "description": "Attempt to book the same slot twice to test conflict handling"
          }
        }
      ]
    },
    {
      "name": "🧪 Integration Test Scenarios",
      "description": "Complete end-to-end workflows",
      "item": [
        {
          "name": "Complete Booking Flow",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Set up test data for complete workflow",
                  "const futureDate = new Date();",
                  "futureDate.setDate(futureDate.getDate() + 14);",
                  "pm.collectionVariables.set('workflow_date', futureDate.toISOString().split('T')[0]);",
                  "pm.collectionVariables.set('workflow_time', '19:00');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// This is a multi-step workflow test",
                  "// Step 1: Check availability",
                  "// Step 2: Generate quote",
                  "// Step 3: Create booking",
                  "// Step 4: Add services",
                  "// Step 5: Confirm booking",
                  "",
                  "pm.test('Workflow can be initiated', function () {",
                  "    // This test serves as a placeholder for complex workflow testing",
                  "    // In practice, you would chain multiple requests using postman.setNextRequest()",
                  "    pm.expect(true).to.be.true;",
                  "});",
                  "",
                  "console.log('To run complete workflow:');",
                  "console.log('1. Check availability for', pm.collectionVariables.get('workflow_date'));",
                  "console.log('2. Generate quote');",
                  "console.log('3. Create booking if available');",
                  "console.log('4. Add any additional services');",
                  "console.log('5. Confirm booking');"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"date\": \"{{workflow_date}}\",\n  \"time\": \"{{workflow_time}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/availability/check",
              "host": ["{{base_url}}"],
              "path": ["availability", "check"]
            },
            "description": "Step 1 of complete booking workflow - Check availability"
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script",
          "// Set up common variables if not already set",
          "",
          "if (!pm.collectionVariables.get('event_date')) {",
          "    const futureDate = new Date();",
          "    futureDate.setDate(futureDate.getDate() + 7);",
          "    pm.collectionVariables.set('event_date', futureDate.toISOString().split('T')[0]);",
          "}",
          "",
          "if (!pm.collectionVariables.get('event_time')) {",
          "    pm.collectionVariables.set('event_time', '18:00');",
          "}",
          "",
          "// Log current test info",
          "console.log('🧪 Running:', pm.info.requestName);",
          "console.log('📅 Test Date:', pm.collectionVariables.get('event_date'));",
          "console.log('🕐 Test Time:', pm.collectionVariables.get('event_time'));"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "// Common assertions for all requests",
          "",
          "pm.test('Response time is acceptable', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "pm.test('Content-Type header is present', function () {",
          "    pm.expect(pm.response.headers.has('Content-Type')).to.be.true;",
          "});",
          "",
          "if (pm.response.code >= 400) {",
          "    pm.test('Error response has proper structure', function () {",
          "        const jsonData = pm.response.json();",
          "        pm.expect(jsonData).to.have.property('error');",
          "        pm.expect(jsonData.error).to.have.property('code');",
          "        pm.expect(jsonData.error).to.have.property('message');",
          "    });",
          "}",
          "",
          "// Log response summary",
          "console.log('✅ Status:', pm.response.code, pm.response.status);",
          "console.log('⏱️ Time:', pm.response.responseTime + 'ms');"
        ]
      }
    }
  ]
}
