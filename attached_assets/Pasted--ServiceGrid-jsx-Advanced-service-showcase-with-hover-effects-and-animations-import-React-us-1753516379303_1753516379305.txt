// ServiceGrid.jsx - Advanced service showcase with hover effects and animations
import React, { useState, useRef } from 'react';
import { motion, useInView, useMotionValue, useSpring, useTransform } from 'framer-motion';
import { ArrowRight, Calendar, Users, Utensils, Flame, Sparkles, ChefHat, Clock, CheckCircle } from 'lucide-react';
import Image from 'next/image';
import Link from 'next/link';

const services = [
  {
    id: 'corporate',
    title: 'Corporate Events',
    subtitle: 'Professional Excellence',
    description: 'Elevate your business gatherings with our premium corporate catering solutions',
    image: '/images/corporate-catering.jpg',
    icon: <Users className="w-6 h-6" />,
    features: [
      'Executive Breakfast & Lunch',
      'Cocktail Receptions',
      'Team Building Events',
      'Conference Catering'
    ],
    stats: { events: '500+', satisfaction: '98%' },
    color: 'from-blue-600 to-indigo-700',
    link: '/services/corporate'
  },
  {
    id: 'weddings',
    title: 'Weddings',
    subtitle: 'Your Perfect Day',
    description: 'Create unforgettable memories with our exquisite wedding catering services',
    image: '/images/wedding-catering.jpg',
    icon: <Sparkles className="w-6 h-6" />,
    features: [
      'Plated Fine Dining',
      'Elegant Buffets',
      'Cocktail Hours',
      'Custom Menu Design'
    ],
    stats: { couples: '1000+', rating: '5.0â˜…' },
    color: 'from-pink-600 to-rose-700',
    link: '/services/weddings'
  },
  {
    id: 'social',
    title: 'Social Events',
    subtitle: 'Celebrate in Style',
    description: 'From intimate gatherings to grand celebrations, we make every moment special',
    image: '/images/social-catering.jpg',
    icon: <Utensils className="w-6 h-6" />,
    features: [
      'Birthday Parties',
      'Anniversaries',
      'Graduations',
      'Holiday Celebrations'
    ],
    stats: { guests: '50K+', venues: '200+' },
    color: 'from-purple-600 to-indigo-700',
    link: '/services/social'
  },
  {
    id: 'bbq',
    title: 'BBQ & Grill',
    subtitle: 'Authentic Flavors',
    description: 'Experience the ultimate outdoor dining with our premium BBQ catering',
    image: '/images/bbq-catering.jpg',
    icon: <Flame className="w-6 h-6" />,
    features: [
      'Live Grilling Stations',
      'Smoked Specialties',
      'Vegetarian Options',
      'Traditional Sides'
    ],
    stats: { meats: '15+', experience: '30yrs' },
    color: 'from-orange-600 to-red-700',
    link: '/services/bbq'
  }
];

const ServiceGrid = () => {
  const sectionRef = useRef(null);
  const isInView = useInView(sectionRef, { once: true, margin: "-100px" });

  return (
    <section ref={sectionRef} className="py-24 bg-gradient-to-b from-gray-50 to-white overflow-hidden">
      <div className="container mx-auto px-4">
        {/* Section Header */}
        <motion.div 
          className="text-center mb-16"
          initial={{ opacity: 0, y: 30 }}
          animate={isInView ? { opacity: 1, y: 0 } : {}}
          transition={{ duration: 0.8 }}
        >
          <span className="inline-flex items-center gap-2 text-amber-600 font-medium tracking-wider uppercase text-sm mb-4">
            <ChefHat className="w-5 h-5" />
            Our Services
            <ChefHat className="w-5 h-5" />
          </span>
          <h2 className="text-5xl md:text-6xl font-serif text-gray-900 mb-6">
            Catering Solutions for Every Occasion
          </h2>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto">
            From boardroom to ballroom, backyard to beachfront, we bring culinary excellence 
            and impeccable service to your special events
          </p>
        </motion.div>

        {/* Services Grid */}
        <div className="grid md:grid-cols-2 gap-8 mb-16">
          {services.map((service, index) => (
            <ServiceCard 
              key={service.id} 
              service={service} 
              index={index}
              isInView={isInView}
            />
          ))}
        </div>

        {/* Bottom CTA */}
        <motion.div 
          className="text-center"
          initial={{ opacity: 0, y: 30 }}
          animate={isInView ? { opacity: 1, y: 0 } : {}}
          transition={{ duration: 0.8, delay: 0.8 }}
        >
          <Link href="/services" className="inline-flex items-center gap-3 px-8 py-4 bg-gray-900 text-white rounded-full font-semibold text-lg hover:bg-gray-800 transition-all duration-300 hover:scale-105 hover:shadow-xl">
            Explore All Services
            <ArrowRight className="w-5 h-5" />
          </Link>
        </motion.div>
      </div>
    </section>
  );
};

// Individual Service Card Component
const ServiceCard = ({ service, index, isInView }) => {
  const [isHovered, setIsHovered] = useState(false);
  const cardRef = useRef(null);
  
  // Mouse position tracking for parallax effect
  const mouseX = useMotionValue(0);
  const mouseY = useMotionValue(0);
  
  // Smooth spring animation for mouse movement
  const springConfig = { damping: 25, stiffness: 150 };
  const x = useSpring(mouseX, springConfig);
  const y = useSpring(mouseY, springConfig);
  
  // Transform values for 3D effect
  const rotateX = useTransform(y, [-0.5, 0.5], [5, -5]);
  const rotateY = useTransform(x, [-0.5, 0.5], [-5, 5]);
  
  const handleMouseMove = (e) => {
    if (!cardRef.current) return;
    
    const rect = cardRef.current.getBoundingClientRect();
    const centerX = rect.left + rect.width / 2;
    const centerY = rect.top + rect.height / 2;
    
    const normalizedX = (e.clientX - centerX) / rect.width;
    const normalizedY = (e.clientY - centerY) / rect.height;
    
    mouseX.set(normalizedX);
    mouseY.set(normalizedY);
  };
  
  const handleMouseLeave = () => {
    mouseX.set(0);
    mouseY.set(0);
    setIsHovered(false);
  };

  return (
    <motion.div
      ref={cardRef}
      className="relative group"
      initial={{ opacity: 0, y: 50 }}
      animate={isInView ? { opacity: 1, y: 0 } : {}}
      transition={{ duration: 0.8, delay: index * 0.2 }}
      onMouseMove={handleMouseMove}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={handleMouseLeave}
      style={{
        transformStyle: "preserve-3d",
        rotateX,
        rotateY
      }}
    >
      <Link href={service.link} className="block">
        <div className="relative h-[500px] rounded-2xl overflow-hidden shadow-xl transition-all duration-500 group-hover:shadow-2xl">
          {/* Background Image */}
          <div className="absolute inset-0">
            <Image
              src={service.image}
              alt={service.title}
              fill
              className="object-cover transition-transform duration-700 group-hover:scale-110"
              sizes="(max-width: 768px) 100vw, 50vw"
            />
            <div className={`absolute inset-0 bg-gradient-to-t ${service.color} opacity-80 group-hover:opacity-90 transition-opacity duration-500`} />
          </div>

          {/* Content */}
          <div className="relative h-full p-8 flex flex-col justify-between text-white">
            {/* Top Section */}
            <div>
              <motion.div 
                className="flex items-center justify-between mb-6"
                initial={{ opacity: 0, x: -20 }}
                animate={isHovered ? { opacity: 1, x: 0 } : { opacity: 0.8, x: 0 }}
                transition={{ duration: 0.3 }}
              >
                <div className="flex items-center gap-3">
                  <div className="p-3 bg-white/20 backdrop-blur-sm rounded-xl">
                    {service.icon}
                  </div>
                  <div>
                    <p className="text-sm opacity-90">{service.subtitle}</p>
                    <h3 className="text-2xl font-bold">{service.title}</h3>
                  </div>
                </div>
                <ArrowRight className={`w-6 h-6 transition-transform duration-300 ${isHovered ? 'translate-x-2' : ''}`} />
              </motion.div>

              <p className="text-lg mb-6 opacity-90 leading-relaxed">
                {service.description}
              </p>

              {/* Features List */}
              <motion.ul 
                className="space-y-3 mb-6"
                initial={{ opacity: 0 }}
                animate={isHovered ? { opacity: 1 } : { opacity: 0.8 }}
                transition={{ duration: 0.3, delay: 0.1 }}
              >
                {service.features.map((feature, idx) => (
                  <motion.li 
                    key={idx}
                    className="flex items-center gap-3"
                    initial={{ opacity: 0, x: -20 }}
                    animate={isHovered ? { opacity: 1, x: 0 } : {}}
                    transition={{ duration: 0.3, delay: 0.1 + idx * 0.05 }}
                  >
                    <CheckCircle className="w-5 h-5 text-green-300" />
                    <span className="text-sm">{feature}</span>
                  </motion.li>
                ))}
              </motion.ul>
            </div>

            {/* Bottom Section - Stats */}
            <motion.div 
              className="flex items-center justify-between pt-6 border-t border-white/20"
              initial={{ opacity: 0, y: 20 }}
              animate={isHovered ? { opacity: 1, y: 0 } : { opacity: 0.7, y: 0 }}
              transition={{ duration: 0.3, delay: 0.2 }}
            >
              <div className="flex gap-6">
                {Object.entries(service.stats).map(([key, value]) => (
                  <div key={key}>
                    <p className="text-2xl font-bold">{value}</p>
                    <p className="text-sm opacity-80 capitalize">{key}</p>
                  </div>
                ))}
              </div>
              <motion.div
                className="flex items-center gap-2 text-sm font-medium"
                animate={isHovered ? { x: 5 } : { x: 0 }}
                transition={{ duration: 0.3 }}
              >
                Learn More
                <ArrowRight className="w-4 h-4" />
              </motion.div>
            </motion.div>
          </div>

          {/* Decorative Elements */}
          <motion.div
            className="absolute top-4 right-4 w-20 h-20 bg-white/10 rounded-full blur-2xl"
            animate={isHovered ? { scale: 1.5, opacity: 0.3 } : { scale: 1, opacity: 0.1 }}
            transition={{ duration: 0.5 }}
          />
          <motion.div
            className="absolute bottom-4 left-4 w-32 h-32 bg-white/10 rounded-full blur-3xl"
            animate={isHovered ? { scale: 1.3, opacity: 0.3 } : { scale: 1, opacity: 0.1 }}
            transition={{ duration: 0.5 }}
          />
        </div>
      </Link>
    </motion.div>
  );
};

// Quick Stats Bar Component
export const ServiceStats = () => {
  const stats = [
    { icon: <Calendar />, value: "10,000+", label: "Events Catered" },
    { icon: <Users />, value: "500K+", label: "Guests Served" },
    { icon: <Clock />, value: "24/7", label: "Support Available" },
    { icon: <CheckCircle />, value: "98%", label: "Satisfaction Rate" }
  ];

  return (
    <div className="bg-gray-900 py-8">
      <div className="container mx-auto px-4">
        <div className="grid grid-cols-2 md:grid-cols-4 gap-8">
          {stats.map((stat, index) => (
            <motion.div
              key={index}
              className="text-center text-white"
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5, delay: index * 0.1 }}
              viewport={{ once: true }}
            >
              <div className="flex justify-center mb-3 text-amber-400">
                {React.cloneElement(stat.icon, { className: "w-8 h-8" })}
              </div>
              <div className="text-3xl font-bold mb-1">{stat.value}</div>
              <div className="text-sm opacity-80">{stat.label}</div>
            </motion.div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default ServiceGrid;