// Add these imports to the top of server/index.ts
import helmet from "helmet";
import rateLimit from "express-rate-limit";
import slowDown from "express-slow-down";

// Add this security middleware setup before your routes
export function setupSecurity(app: Express) {
  // Helmet for security headers
  app.use(helmet({
    contentSecurityPolicy: {
      directives: {
        defaultSrc: ["'self'"],
        styleSrc: [
          "'self'", 
          "'unsafe-inline'", // Needed for Tailwind CSS
          "https://fonts.googleapis.com",
          "https://cdnjs.cloudflare.com"
        ],
        fontSrc: [
          "'self'",
          "https://fonts.gstatic.com",
          "https://cdnjs.cloudflare.com"
        ],
        imgSrc: [
          "'self'", 
          "data:", 
          "https:", // Allow images from any HTTPS source
          "blob:"
        ],
        scriptSrc: [
          "'self'",
          "'unsafe-eval'", // Needed for Vite in development
          "https://replit.com", // For Replit environment
          process.env.NODE_ENV === 'development' ? "'unsafe-inline'" : ""
        ].filter(Boolean),
        connectSrc: [
          "'self'",
          "https://api.replit.com", // Replit API
          "wss://replit.com", // WebSocket for Replit
          process.env.DATABASE_URL ? new URL(process.env.DATABASE_URL).origin : ""
        ].filter(Boolean),
        frameSrc: ["'none'"],
        objectSrc: ["'none'"],
        upgradeInsecureRequests: process.env.NODE_ENV === 'production' ? [] : null
      },
    },
    crossOriginEmbedderPolicy: false, // Disable for better compatibility
    hsts: {
      maxAge: 31536000,
      includeSubDomains: true,
      preload: true
    }
  }));

  // Rate limiting for API endpoints
  const apiLimiter = rateLimit({
    windowMs: 15 * 60 * 1000, // 15 minutes
    max: 100, // Limit each IP to 100 requests per windowMs
    message: {
      error: "Te veel verzoeken, probeer het later opnieuw.",
      retryAfter: "15 minuten"
    },
    standardHeaders: true,
    legacyHeaders: false,
    skip: (req) => {
      // Skip rate limiting in development
      return process.env.NODE_ENV === 'development';
    }
  });

  // Stricter rate limiting for booking endpoints
  const bookingLimiter = rateLimit({
    windowMs: 60 * 60 * 1000, // 1 hour
    max: 5, // Limit booking attempts
    message: {
      error: "Te veel boekingspogingen, probeer het over een uur opnieuw.",
      retryAfter: "1 uur"
    },
    standardHeaders: true,
    legacyHeaders: false,
    skip: (req) => process.env.NODE_ENV === 'development'
  });

  // Speed limiter for repeated requests
  const speedLimiter = slowDown({
    windowMs: 15 * 60 * 1000, // 15 minutes
    delayAfter: 50, // Allow 50 requests per 15 minutes at full speed
    delayMs: 500, // Add 500ms delay per request after delayAfter
    maxDelayMs: 5000, // Maximum delay of 5 seconds
    skip: (req) => process.env.NODE_ENV === 'development'
  });

  // Apply rate limiting
  app.use('/api', speedLimiter);
  app.use('/api', apiLimiter);
  app.use('/api/bookings', bookingLimiter);
  app.use('/api/quotes', bookingLimiter);

  // Additional security headers
  app.use((req, res, next) => {
    // Remove server information
    res.removeHeader('X-Powered-By');
    
    // Custom security headers
    res.setHeader('X-Content-Type-Options', 'nosniff');
    res.setHeader('X-Download-Options', 'noopen');
    res.setHeader('X-XSS-Protection', '1; mode=block');
    res.setHeader('Referrer-Policy', 'strict-origin-when-cross-origin');
    
    // Cache control for API responses
    if (req.path.startsWith('/api')) {
      res.setHeader('Cache-Control', 'no-store, no-cache, must-revalidate');
      res.setHeader('Pragma', 'no-cache');
    }
    
    next();
  });

  // Request sanitization
  app.use((req, res, next) => {
    // Basic input sanitization
    if (req.body && typeof req.body === 'object') {
      req.body = sanitizeObject(req.body);
    }
    
    if (req.query && typeof req.query === 'object') {
      req.query = sanitizeObject(req.query);
    }
    
    next();
  });
}

// Input sanitization helper
function sanitizeObject(obj: any): any {
  if (obj === null || obj === undefined) return obj;
  
  if (typeof obj === 'string') {
    return obj
      .replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '') // Remove script tags
      .replace(/javascript:/gi, '') // Remove javascript: protocol
      .replace(/on\w+\s*=/gi, '') // Remove event handlers
      .trim();
  }
  
  if (Array.isArray(obj)) {
    return obj.map(sanitizeObject);
  }
  
  if (typeof obj === 'object') {
    const sanitized: any = {};
    for (const [key, value] of Object.entries(obj)) {
      // Sanitize key names
      const cleanKey = key.replace(/[^\w\-_]/g, '');
      if (cleanKey) {
        sanitized[cleanKey] = sanitizeObject(value);
      }
    }
    return sanitized;
  }
  
  return obj;
}

// Error handling middleware
export function setupErrorHandling(app: Express) {
  // 404 handler
  app.use('*', (req, res) => {
    res.status(404).json({
      error: 'Endpoint niet gevonden',
      message: `${req.method} ${req.originalUrl} bestaat niet`,
      timestamp: new Date().toISOString()
    });
  });

  // Global error handler
  app.use((err: any, req: express.Request, res: express.Response, next: express.NextFunction) => {
    // Log error
    console.error('Server Error:', {
      error: err.message,
      stack: process.env.NODE_ENV === 'development' ? err.stack : undefined,
      url: req.url,
      method: req.method,
      timestamp: new Date().toISOString()
    });

    // Don't leak error details in production
    const isDevelopment = process.env.NODE_ENV === 'development';
    
    res.status(err.status || 500).json({
      error: isDevelopment ? err.message : 'Er is een interne serverfout opgetreden',
      ...(isDevelopment && { stack: err.stack }),
      timestamp: new Date().toISOString()
    });
  });
}

// Health check endpoint
export function setupHealthCheck(app: Express) {
  app.get('/health', (req, res) => {
    res.json({
      status: 'healthy',
      timestamp: new Date().toISOString(),
      uptime: process.uptime(),
      environment: process.env.NODE_ENV || 'development',
      version: process.env.npm_package_version || '1.0.0'
    });
  });
}

// Usage in your main server file:
// Add these calls after creating your Express app but before registering routes:
/*
const app = express();

// Setup security first
setupSecurity(app);

// Your existing middleware and routes
// ...

// Setup error handling last
setupErrorHandling(app);
setupHealthCheck(app);
*/