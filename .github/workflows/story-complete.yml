name: Story/Epic Completion Workflow

on:
  workflow_dispatch:
    inputs:
      story_id:
        description: 'Story/Epic ID that was completed'
        required: true
        type: string
      story_title:
        description: 'Story/Epic title'
        required: true
        type: string
      deployment_type:
        description: 'Deployment type'
        required: true
        type: choice
        options:
          - staging
          - production
        default: 'staging'

jobs:
  story-completion:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        run: npm run test --if-present
        
      - name: Build application
        run: npm run build
        
      - name: Deploy to staging
        if: github.event.inputs.deployment_type == 'staging'
        run: |
          echo "Deploying story ${{ github.event.inputs.story_id }} to staging..."
          # Add your staging deployment commands here
          # Example: npm run deploy:staging
          echo "âœ… Deployed to staging environment"
          
      - name: Deploy to production
        if: github.event.inputs.deployment_type == 'production'
        run: |
          echo "Deploying story ${{ github.event.inputs.story_id }} to production..."
          # Add your production deployment commands here
          # Example: npm run deploy:production
          echo "âœ… Deployed to production environment"
          
      - name: Sync story completion to Notion
        env:
          NOTION_API_KEY: ${{ secrets.NOTION_API_KEY }}
          NOTION_DATABASE_ID: "21df23ab1c8f80ef914effd0d37a5b43"
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          echo "Syncing completed story to Notion..."
          
          cat > sync_story.js << 'EOF'
          const { spawn } = require('child_process');
          
          const storyData = {
            id: process.env.STORY_ID,
            title: process.env.STORY_TITLE,
            status: 'completed',
            type: 'story/epic',
            deployment_env: process.env.DEPLOYMENT_TYPE,
            completed_at: new Date().toISOString(),
            project: 'Wesley Ambacht Enhancement'
          };
          
          console.log('Syncing story completion to Notion:', storyData);
          
          // Use Claude Code MCP to sync to Notion
          const claude = spawn('claude', ['--headless', '--mcp', 
            `Update Notion story completion: ${JSON.stringify(storyData)}`
          ], {
            env: {
              ...process.env,
              NOTION_API_KEY: process.env.NOTION_API_KEY,
              NOTION_DATABASE_ID: process.env.NOTION_DATABASE_ID
            }
          });
          
          claude.stdout.on('data', (data) => {
            console.log(`Claude: ${data}`);
          });
          
          claude.stderr.on('data', (data) => {
            console.error(`Error: ${data}`);
          });
          
          claude.on('close', (code) => {
            console.log(`Story sync completed with code ${code}`);
          });
          EOF
          
          STORY_ID="${{ github.event.inputs.story_id }}" \
          STORY_TITLE="${{ github.event.inputs.story_title }}" \
          DEPLOYMENT_TYPE="${{ github.event.inputs.deployment_type }}" \
          node sync_story.js
          
      - name: Create release tag
        if: github.event.inputs.deployment_type == 'production'
        run: |
          STORY_ID="${{ github.event.inputs.story_id }}"
          TAG_NAME="story-${STORY_ID}-$(date +%Y%m%d-%H%M%S)"
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git tag -a "$TAG_NAME" -m "Story $STORY_ID completed: ${{ github.event.inputs.story_title }}"
          git push origin "$TAG_NAME"
          
          echo "Created release tag: $TAG_NAME"
          
      - name: Create deployment summary
        uses: actions/github-script@v7
        with:
          script: |
            const storyId = '${{ github.event.inputs.story_id }}';
            const storyTitle = '${{ github.event.inputs.story_title }}';
            const deploymentType = '${{ github.event.inputs.deployment_type }}';
            
            const summary = `
            ## ðŸš€ Story Completion Summary
            
            **Story ID:** ${storyId}
            **Title:** ${storyTitle}
            **Deployment:** ${deploymentType}
            **Completed:** ${new Date().toISOString()}
            
            ### Actions Taken:
            - âœ… Tests executed
            - âœ… Application built
            - âœ… Deployed to ${deploymentType}
            - âœ… Synced to Notion database
            ${deploymentType === 'production' ? '- âœ… Release tag created' : ''}
            
            ### Next Steps:
            - Monitor deployment metrics
            - Gather user feedback
            - Plan next story iteration
            `;
            
            await core.summary.addRaw(summary).write();
            
            // Also add a commit comment if there are recent commits
            const { data: commits } = await github.rest.repos.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 1
            });
            
            if (commits.length > 0) {
              await github.rest.repos.createCommitComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: commits[0].sha,
                body: `ðŸŽ‰ Story ${storyId} completed and deployed to ${deploymentType}!`
              });
            }