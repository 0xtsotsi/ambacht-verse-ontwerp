name: Story/Epic Completion Workflow

on:
  workflow_dispatch:
    inputs:
      story_id:
        description: "Story/Epic ID that was completed"
        required: true
        type: string
      story_title:
        description: "Story/Epic title"
        required: true
        type: string
      deployment_type:
        description: "Deployment type"
        required: true
        type: choice
        options:
          - staging
          - production
        default: "staging"

jobs:
  story-completion:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test --if-present

      - name: Build application
        run: npm run build

      - name: Deploy to staging
        if: github.event.inputs.deployment_type == 'staging'
        run: |
          echo "Deploying story ${{ github.event.inputs.story_id }} to staging..."
          # Add your staging deployment commands here
          # Example: npm run deploy:staging
          echo "✅ Deployed to staging environment"

      - name: Deploy to production
        if: github.event.inputs.deployment_type == 'production'
        run: |
          echo "Deploying story ${{ github.event.inputs.story_id }} to production..."
          # Add your production deployment commands here
          # Example: npm run deploy:production
          echo "✅ Deployed to production environment"

      - name: Sync story completion to Notion
        env:
          NOTION_API_KEY: ${{ secrets.NOTION_API_KEY }}
          NOTION_DATABASE_ID: ${{ secrets.NOTION_DATABASE_ID }}
        run: |
          echo "🔄 Syncing completed story to Notion..."

          # Create dynamic task data for the story
          cat > story-data.json << EOF
          {
            "title": "✅ ${{ github.event.inputs.story_id }} - ${{ github.event.inputs.story_title }}",
            "summary": "Story completed and deployed to ${{ github.event.inputs.deployment_type }}",
            "description": "Story ID: ${{ github.event.inputs.story_id }}\\nDeployment: ${{ github.event.inputs.deployment_type }}\\nCompleted: $(date -u +%Y-%m-%dT%H:%M:%SZ)\\nCommit: ${{ github.sha }}",
            "priority": "High",
            "status": "Done",
            "types": ["Story", "Deployment", "${{ github.event.inputs.deployment_type }}"],
            "effort": "Completed"
          }
          EOF

          # Run the sync script with the story data
          if [ -f "sync-to-notion.cjs" ]; then
            node sync-to-notion.cjs --data=story-data.json --update-status
            
            if [ $? -eq 0 ]; then
              echo "✅ Successfully synced story to Notion"
            else
              echo "❌ Failed to sync to Notion (non-blocking error)"
              exit 0  # Don't fail the workflow
            fi
          else
            echo "⚠️  sync-to-notion.cjs not found, skipping Notion sync"
          fi

          # Clean up
          rm -f story-data.json

      - name: Create release tag
        if: github.event.inputs.deployment_type == 'production'
        run: |
          STORY_ID="${{ github.event.inputs.story_id }}"
          TAG_NAME="story-${STORY_ID}-$(date +%Y%m%d-%H%M%S)"

          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          git tag -a "$TAG_NAME" -m "Story $STORY_ID completed: ${{ github.event.inputs.story_title }}"
          git push origin "$TAG_NAME"

          echo "Created release tag: $TAG_NAME"

      - name: Create deployment summary
        uses: actions/github-script@v7
        with:
          script: |
            const storyId = '${{ github.event.inputs.story_id }}';
            const storyTitle = '${{ github.event.inputs.story_title }}';
            const deploymentType = '${{ github.event.inputs.deployment_type }}';

            const summary = `
            ## 🚀 Story Completion Summary

            **Story ID:** ${storyId}
            **Title:** ${storyTitle}
            **Deployment:** ${deploymentType}
            **Completed:** ${new Date().toISOString()}

            ### Actions Taken:
            - ✅ Tests executed
            - ✅ Application built
            - ✅ Deployed to ${deploymentType}
            - ✅ Synced to Notion database
            ${deploymentType === 'production' ? '- ✅ Release tag created' : ''}

            ### Next Steps:
            - Monitor deployment metrics
            - Gather user feedback
            - Plan next story iteration
            `;

            await core.summary.addRaw(summary).write();

            // Also add a commit comment if there are recent commits
            const { data: commits } = await github.rest.repos.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 1
            });

            if (commits.length > 0) {
              await github.rest.repos.createCommitComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: commits[0].sha,
                body: `🎉 Story ${storyId} completed and deployed to ${deploymentType}!`
              });
            }
